/**
 * This class creates and launches an initial generation if none is provided. This is the application's entry point.
 * @author Christopher Ellis (ChrisJoinEngine)
 * @versionNote 1.0; we'll call this one 1. Um...version 1.0, turpentine. See I can give cool names.
 * @version 1.1 bug fixes, slight optimization
 * @version 1.1.1 now, fixed a small bug with standard out--didn't affect functionality, but confused the crap out of me 
 * @version 1.1.2 slight wording change, allows for proxy list selection, added help word as keyword to -h
 * @version 1.1.3 added an option to allow for queue threading, allow for a bit sneakier approach -polite, 
 * slight documentation update, changed one default value to false
 * @version 1.1.4 added a hidden flag for stopping on 403, may make visible depending on value add
 * @version 1.2.0 changed the name, added support for requests from file. Slowly testing/ensuring support for pre-existing flags
 * Worth noting, tor for requests from file is not supported yet, otherwise it's pretty close.
 * TODO more testing, better integrated support for requests from files, migrate from jsoup to apache for consistency, clean code
 */
package runnable;

//ORDERING IS LOWER, UPPER, NUMBER, MIN LENGTH, MAX LENGTH

import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import database.DBCache;
import generation.FitnessCalculator;
import generation.Generation;
import generation.GenerationChild;
import parser.WebParser;
import urlLibrary.URLBank;

public class GAForcer
{
	private static Scanner in=new Scanner(System.in);
	
	private static int ITERATION_COUNT=10;
	private static boolean CONDUCT_TOR_CHECK=false;
	private static boolean PAUSE=false;
	private static boolean reloadRequired=false;
	
	//Flag section
	private static final String HELP_FLAG="-h";
	private static final String HELP_FLAG_ALTERNATE="-help";
	private static final String KEY_FILE_FLAGE="-k";
	private static final String POLITE_FLAG="-polite";
	private static final String ITERATION_COUNT_FLAG="-i";
	private static final String PAUSE_FLAG="-p";
	private static final String FORCE_SSL_FLAG="-ssl";
	private static final String MIN_FLAG="-min";
	private static final String MAX_FLAG="-max";
	private static final String STOP_ON_BLOCK="-soblock";
	private static final String GEN_SIZE_FLAG="-s";
	private static final String MUTATION_FLAG="-m";
	private static final String BASE_URL_FLAG="http";
	private static final String PROXY_FLAG="-proxy";
	private static final String LPROXY_FLAG="-lproxy";
	private static final String TIMEOUT_FLAG = "-timeout";
	private static final String DELAY_FLAG = "-delay";
	private static final String USER_AGENT_FLAG="-ua";
	private static final String TOR_CHECK_FLAG="-torcheck";
	private static final String BRUTE_MODE_FLAG="-db";
	private static final String DISABLE_SSL_CHECK_FLAG="-nocheck";
	private static final String REDIRECT_MODE_FLAG="-dr";
	private static final String REQUEST_FLAG="-r";
	
	//TODO consider adding the stop on block function as public/non-hidden
	private static final String HELP_MESSAGE=""
			+ "This uses a genetic algorithm to brute force a URL that appears random, it learns "+System.getProperty("line.separator")
			+ "from past guesses and refines future tries. If flags are set, the program will attempt "+System.getProperty("line.separator")
			+ "to resume from its save file, but will generate a new, blank starting population if " +System.getProperty("line.separator")
			+ "flags that change generation structure (such as generation size) are set. "+System.getProperty("line.separator")+System.getProperty("line.separator")
			+ "Recognized flags are: "+System.getProperty("line.separator")
			+ HELP_FLAG+"  : display the help message (this) and then exit the program "+System.getProperty("line.separator")
			+ PAUSE_FLAG+"  : causes the program to pause after every generation "+System.getProperty("line.separator")
			+ BRUTE_MODE_FLAG+" : disable brute force mode (will only confirm on redirect, ignores 200 OK response)" +System.getProperty("line.separator")
			+ REDIRECT_MODE_FLAG+" : disable redirect mode (will only confirm on 200 OK, ignores 301,302, etc. response)"+System.getProperty("line.separator")
			+ KEY_FILE_FLAGE+"   [file]   : only alert on keywords from a provided file (DB still saves hits) " +System.getProperty("line.separator")
			+ ITERATION_COUNT_FLAG+"   [number] : the number of tries to issue per generation child. Default is "+ITERATION_COUNT+System.getProperty("line.separator")	
			+ MIN_FLAG+" [number] : min length allowed for URL pieces generated by a thread. Default is "+GenerationChild.getStringMin()+System.getProperty("line.separator")
			+ MAX_FLAG+" [number] : max length allowed for URL pieces generated by a thread. Default is "+GenerationChild.getStringMax()+System.getProperty("line.separator")
			+ GEN_SIZE_FLAG+"   [number] : size of generations, smaller is less traffic, bigger more accurate. Default is "+Generation.getNewGenerationSize()+System.getProperty("line.separator")
			+ MUTATION_FLAG+"   [number] : chance of bit mutation from 1 to 1000, 1000 is 100%. Best left small. Default is "+ FitnessCalculator.getMutationChance()+System.getProperty("line.separator")
			+ REQUEST_FLAG +"   [file]   : uses a request from a text file. Use ^ to signify an input position. IN PROGRESS"+ System.getProperty("line.separator")+"                Request from file is an in-progress feature, may be oddities. "+FORCE_SSL_FLAG+ " may be needed." + System.getProperty("line.separator")
			+ FORCE_SSL_FLAG+"          : forces SSL connection, only useful with the "+REQUEST_FLAG+" option."+ System.getProperty("line.separator")
			+ System.getProperty("line.separator")
			+ PROXY_FLAG+"   [server:port] : proxy requests. (e.g. -proxy 127.0.0.1:8080) works well with timeout set." +System.getProperty("line.separator")
			+ LPROXY_FLAG+"  [file]        : provide a file to randomly select a proxy per request. Timeout increase helps." +System.getProperty("line.separator")
			+ TIMEOUT_FLAG+" [number]      : duration (milli) to wait for server response. Helps with proxy." +System.getProperty("line.separator")  
			+ DELAY_FLAG+"   [number]      : duration (milli) to wait between each thread's requests (throttle)."+ System.getProperty("line.separator")
			+ USER_AGENT_FLAG+"      [user agent]  : sets the user agent to use for requests. Default is random per request.  "+ System.getProperty("line.separator")
			+ POLITE_FLAG+"                : force threads to operate one at a time (single thread)"+System.getProperty("line.separator")
			+ DISABLE_SSL_CHECK_FLAG+"               : trust all SSL certs, may be useful with proxies."+System.getProperty("line.separator")
			+ TOR_CHECK_FLAG +"              : at the start of each generation check if traffic is routed through tor."+ System.getProperty("line.separator") + System.getProperty("line.separator")
			+ "delays are PER THREAD. Ten threads will still send one requests before delaying." + System.getProperty("line.separator")+"Use polite mode if you want true throttling"+ System.getProperty("line.separator")
			+ System.getProperty("line.separator")
			+ "REQUIRED, a base URL [base url, '"+URLBank.getURLDelimiter()+"' as delimiter] : this sets the URL that should be attacked. "+System.getProperty("line.separator")
			+ "It has not been tested for all URLs, but if the page throws a 302, 200, 404, it will probably work. "+System.getProperty("line.separator")
			+ "An example of using this parameter is http://abc.cd/, the '"+URLBank.getURLDelimiter()+"' character may also be used "+System.getProperty("line.separator")
			+ "to generate between strings similar to http://abc.cd/"+URLBank.getURLDelimiter()+"/something.com. Everything after the URL "+System.getProperty("line.separator")
			+ "or at the generation point will be appended by guesses. The above example will generated guesses "+System.getProperty("line.separator")
			+ "of the form http://abc.cd/guess. This is confirmed to work with some common targets. Requests"+System.getProperty("line.separator")
			+ "from a file may be used as well, put "+URLBank.getURLDelimiter()+" into injection points. the request from file feature"+System.getProperty("line.separator")
			+ "is still being built out, so it may have some issues."+System.getProperty("line.separator")
			+ System.getProperty("line.separator")
			+ "Also, I am in no way responsible for how you (mis)use this application. -ChrisJoinEngine" +System.getProperty("line.separator");
	
	/**
	 * Loads the parameters and launches the first generation
	 * @param args arguments to pass into the program
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public static void main(String[] args) throws IOException, InterruptedException 
	{		
		Runtime.getRuntime().addShutdownHook(new Thread() 
		{
		    public void run()
		    { 
		    	System.out.println("Goodbye");
		    	DBCache.closeDatabase();
		    }
		 });
		
		if (args.length>0)
		{
			try
			{
				processArgs(args);
				validateBaseURL();
			}
			catch (Exception e)
			{
				System.out.println("Invalid arguments detected. Could you be missing a value? (i.e. -i [some number])");
				System.exit(0);
			}
		}
		else
		{
			System.out.println("No URL found. Terminating.");
			System.out.println(HELP_MESSAGE);
			System.exit(0);
		}
		DBCache.initialize();
		
		FitnessCalculator fitness=new FitnessCalculator();
		ArrayList<GenerationChild> currentGeneration = Generation.loadGenerationFromFile();
	
		System.out.println("Here we go. Beware too many requests if you want to be sneaky");
		int count=1;
		while (true)
		{
			if (CONDUCT_TOR_CHECK)
				WebParser.checkTor();
			
			Generation.startGeneration(currentGeneration, ITERATION_COUNT);
			currentGeneration=fitness.getNextGeneration(currentGeneration);
			
			if (PAUSE)
			{
				System.out.println("Gen "+count+" completed. Enter any key and press enter to continue to next gen.");
				in.next();
			}
			count++;
		}
	} 
	
	/**
	 * Reads in all the arguments and sets the corresponding options
	 * @param args the arguments to be read in
	 */
	private static void processArgs(String[] args)
	{
		for (int i=0; i<args.length; i++)
		{
			//Because I always use the double dash for flags
			args[i]=args[i].replaceAll("--", "-");
			
			//Make sure you grab the base URL
			if (args[i].toLowerCase().contains(BASE_URL_FLAG) || args[i].contains(URLBank.getURLDelimiter()))
			{
				URLBank.setBaseURL(args[i]);
			}
			
			switch (args[i].toLowerCase())
			{
				case KEY_FILE_FLAGE:
					GenerationChild.setKeyFile(args[i+1]);
					break;
				case HELP_FLAG:
					System.out.println("Help flag detected. Terminating.");
					System.out.println(HELP_MESSAGE);
					System.exit(0);
					break;
				case HELP_FLAG_ALTERNATE: //|| is not an allowed operator in case
					System.out.println("Help flag detected. Terminating.");
					System.out.println(HELP_MESSAGE);
					System.exit(0);
					break;
				case ITERATION_COUNT_FLAG:
					setIterationCount(args[i+1]);
					break;
				case POLITE_FLAG:
					Generation.setPoliteMode(true);
					break;
				case PAUSE_FLAG:
					setPauseFlag(true);
					break;
				case MIN_FLAG:
					GenerationChild.setStringMin(args[i+1]);
					setReloadRequired(true);
					break;
				case MAX_FLAG:
					GenerationChild.setStringMax(args[i+1]);
					setReloadRequired(true);
					break;
				case GEN_SIZE_FLAG:
					Generation.setNewGenerationSize(args[i+1]);
					setReloadRequired(true);
					break;
				case MUTATION_FLAG:
					FitnessCalculator.setMutationChance(args[i+1]);
					break;
				case PROXY_FLAG:
					System.out.println("Proxy detected");
					WebParser.parseProxy(args[i+1]);
					break;
				case LPROXY_FLAG:
					System.out.println("List of proxies detected, this will overwride "+PROXY_FLAG+" if it's set.");
					WebParser.parseProxyList(args[i+1]);
					break;
				case TIMEOUT_FLAG:
					WebParser.setTimeout(args[i+1]);
					break;
				case DELAY_FLAG:
					GenerationChild.setDelayFlag(args[i+1]);
					break;
				case USER_AGENT_FLAG:
					WebParser.setUserAgent(args[i+1]);
					WebParser.setStaticUserAgent(true);
					break;
				case STOP_ON_BLOCK:
					WebParser.setStopOnBlock(true);
					break;
				case BRUTE_MODE_FLAG:
					WebParser.setBruteMode(false);
					break;
				case TOR_CHECK_FLAG:
					setTorCheck(true);
					break;
				case DISABLE_SSL_CHECK_FLAG:
					WebParser.disableSSLCheck();
					break;
				case REDIRECT_MODE_FLAG:
					WebParser.setRedirectMode(false);
					break;
				case FORCE_SSL_FLAG:
					WebParser.setForceSSL(true);
					break;
				case REQUEST_FLAG:
					URLBank.setBasePOST(args[i+1]);
					URLBank.setUsePost(true);
					break;
			}
		}
		
		if (WebParser.getRedirectMode() && WebParser.getBruteMode())
			System.out.println("Both redirect and brute mode active. May create false postivies if target does not use both 200 and 301 to signal correct result.");
		else if (WebParser.getBruteMode()==false & WebParser.getRedirectMode()==false)
			System.out.println("SYSTEM MAY NEVER ALERT. Both REDIRECT and BRUTE modes are disabled! Did you want this?");
	}
	
	/**
	 * Updates the iteration count to a provided value
	 * @param newCount the new value for the iteration count
	 */
	private static void setIterationCount(String newCount)
	{
		try
		{
			ITERATION_COUNT=Integer.parseInt(newCount);
		}
		catch (Exception e)
		{
			System.out.println("Invalid iteration count parameter provided. Terminating");
			System.exit(0);
		}
	}
	
	/**
	 * This returns the currently set iteration count
	 * @return the currently set iteration count
	 */
	public static int getIterationCount()
	{
		return ITERATION_COUNT;
	}
	
	/**
	 * This sets the pause flag to the provided value
	 * @param newValue the new value for the pause flag
	 */
	private static void setPauseFlag(boolean newValue)
	{
		PAUSE=newValue;
	}
	
	/**
	 * Returns true if a reload of generation is required, false otherwise
	 * @return true if a generation reload is required, false if it isn't (you may resume from saved generation)
	 */
	public static boolean reloadRequired()
	{
		return reloadRequired;
	}
	
	/**
	 * This sets the reload required value
	 * @param newValue the new value to set the reload required to
	 */
	public static void setReloadRequired(boolean newValue)
	{
		reloadRequired=newValue;
	}
	
	/**
	 * Just a helper method so that the help message may be displayed from other classes easily
	 */
	public static void displayHelpMessage()
	{
		System.out.println(HELP_MESSAGE);
	}
	
	/**
	 * Validates if a base URL has been set, if not, displays a help message and terminates
	 */
	private static void validateBaseURL()
	{
		if (URLBank.getBaseURL()==null && URLBank.getBasePOST()==null)
		{
			System.out.println("You must provide a base url to target INCLUDING HTTP or HTTPS,"
					+ "(e.g. java -jar LinkForcer.jar http://bit.ly/)");
			GAForcer.displayHelpMessage();
			System.exit(0);
		}
	}
	
	/**
	 * This sets the tor check flag to a new, provided, value.
	 * @param newValue the new value for the tor check flag
	 */
	private static void setTorCheck(boolean newValue)
	{
		CONDUCT_TOR_CHECK=newValue;
	}
}
